using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using AjaxControlToolkit;
using System.Globalization;
using System.Text.RegularExpressions;
using System.IO;
using System.Net.Mail;
using System.Text;
using System.Collections.Generic;
using System.Drawing;

public partial class ResetPasswordForm : BasePage
{
    LoginMast ObjMast = new LoginMast();
    message msg = new message();
    Email sendmail = new Email();
    string flag = "";
    DataTable dt = new DataTable();
    Random randObj = new Random();
    Random randObjCode = new Random();
    Int32 UniqueRandomNumber = 0;
    byte[] imgfile;
    Sms objsms = new Sms();
    Int32 UniqueRandomNumberCode = 0;
    string SecurityCode;
    string regno = "";
    CandidateData objcand = new CandidateData();
    protected void Page_Load(object sender, EventArgs e)
    {
        this.Page.ClientScript.RegisterStartupScript(this.GetType(), "MyScript", "checkJavaScriptValidity();", true);
        txt_name.Focus();


        if (!IsPostBack)
        {
            UniqueRandomNumber = randObj.Next(1, 10000);

            Session["token"] = UniqueRandomNumber.ToString();
            this.csrftoken.Value = Session["token"].ToString();
            fillyear("");
            if (Request.QueryString["flag"] != null)
            {
                txt_name.Text = MD5Util.Decrypt(Request.QueryString["name"].ToString(), true);
                txt_name.Enabled = false;
                txt_fh_name.Text = MD5Util.Decrypt(Request.QueryString["fname"].ToString(), true);
                txt_fh_name.Enabled = true;
                txt_DOB.Text = MD5Util.Decrypt(Request.QueryString["dob"].ToString(), true);
                txt_DOB.Enabled = false;
            }
            //fillYears();
        }
        else
        {
            if (((Request.Form["csrftoken"] != null) && (Session["token"] != null)) && (Request.Form["csrftoken"].ToString().Equals(Session["token"].ToString())))
            {
                //valid Page
            }
            else
            {
                Response.Redirect("ErrorPage.aspx");
            }
        }


    }
    public void fillyear(string dob)
    {
        string can_dob = dob;
        int y = 60;
        int year = DateTime.Now.Year;
        if (can_dob != "")
        {
            string b_year = can_dob.Substring(6);
            y = Convert.ToInt16(b_year);
            y = y + 12;
            y = year - y;
        }
        ddl_pass_year.Items.Clear();

        ListItem li;

        for (int i = year; i >= year - y; i--)
        {
            li = new ListItem();
            li.Text = i.ToString();
            li.Value = i.ToString();
            ddl_pass_year.Items.Add(li);
        }
        li = new ListItem();
        li.Text = "--Select Year--";
        li.Value = "";
        ddl_pass_year.Items.Insert(0, li);
    }
    protected void btnrsubmit_Click(object sender, EventArgs e)
    {
        string current_date = DateTime.Now.AddYears(-12).ToString("dd/MM/yyyy");
        string posCode = string.Empty;
        Regex reg = new Regex(@"^[a-zA-Z0-9!$%^*@#&]{6,}$");

        Regex reg_num_only = new Regex(@"(?i)^[a-z ]+");

        if (CheckBoxdisclaimer.Checked)
        {

            string[] listofvalues = new string[] { "Indian", "Other" };

            if (Validation.chkescape(txt_name.Text) || txt_name.Text.Length > 50 || !reg_num_only.IsMatch(txt_name.Text))
            {
                msg.Show("Invalid Character in Name or Name length is more than 50 Characters.");

            }
            else if (txt_fh_name.Text != "" && (Validation.chkLevel20(txt_fh_name.Text) || txt_fh_name.Text.Length > 50 || !reg_num_only.IsMatch(txt_fh_name.Text)))
            {
                msg.Show("Invalid Character in Father Name or Father Name length is more than 50 Characters.");

            }
            else if (txt_mothername.Text != "" && (Validation.chkLevel20(txt_mothername.Text) || txt_mothername.Text.Length > 50 || !reg_num_only.IsMatch(txt_mothername.Text)))
            {
                msg.Show("Invalid Character in Mother Name or Mother Name length is more than 50 Characters.");

            }
            else if (txtspouse.Text != "" && (Validation.chkLevel20(txtspouse.Text) || txtspouse.Text.Length > 50 || !reg_num_only.IsMatch(txtspouse.Text)))
            {
                msg.Show("Invalid Character in Spouse Name or Spouse Name length is more than 50 Characters.");

            }

            else if (Validation.chkLevel(txt_mob.Text))
            {
                msg.Show("Invalid Character in New Mobile No");
            }
            else if (Validation.chkLevel(ddl_pass_year.SelectedValue))
            {
                msg.Show("Invalid Character in Passing year");
            }

            else if (Validation.chkLevel(txt_roll_no.Text) || txt_roll_no.Text.Length < 3 || txt_roll_no.Text.Length > 15)
            {
                msg.Show("Invalid Character in Roll No or Roll No length is less than 3 digit or Roll No length is more than 15 digit.");
            }
            else if (!Validation.check_essential(txt_name.Text))
            {
                msg.Show("Please enter name");
            }
            else if (!Validation.check_essential(txt_mob.Text))
            {
                msg.Show("Please enter new moblie No.");
            }
            else if (!Validation.check_essential(txt_email.Text))
            {
                msg.Show("Please enter new E-mail Id");
            }
            else if (txt_fh_name.Text == "" && txt_mothername.Text == "" && txtspouse.Text == "")
            {
                msg.Show("Please enter at least one of Father Name/Mother Name/Spouse Name");
            }
            else if (!Cert10FileUpload1.HasFile && !GovtIdfileupload1.HasFile && !fuPostCard.HasFile)
            {
                msg.Show("Please select documents to be uploaded");
            }

            else
            {
                try
                {
                    int i = 0;
                    string ip = GetIPAddress();
                    DateTime date = DateTime.Now;
                    string rdate = date.ToString("dd/MM/yyyy");
                    string nextdaydate = Utility.formatDatewithtime(DateTime.Now.AddDays(1));
                    string regNo = "", requestReferanceNo = "";
                    regNo = txt_DOB.Text.Replace("/", "") + txt_roll_no.Text + ddl_pass_year.SelectedValue;
                    //requestReferanceNo = (regNo + rdate.Replace("/", "").Replace(":", "").Replace(".", "")).Replace(" ", "");
                    requestReferanceNo = (regNo + rdate.Replace("/", "").Replace("-", ""));
                    //uploadTenthCerificate();
                    //uploadGovtIDProof();

                    //if (rbtApplid.SelectedValue == "Yes")
                    //{
                    //    posCode = ddlPostCode.SelectedValue;
                    //}
                    //else
                    //{
                    posCode = null;
                    //}
                    string contentType = Cert10FileUpload1.PostedFile.ContentType;
                    HttpPostedFile file = Cert10FileUpload1.PostedFile;
                    byte[] document = new byte[file.ContentLength];
                    file.InputStream.Read(document, 0, (int)file.ContentLength);

                    string contentTypeGovID = GovtIdfileupload1.PostedFile.ContentType;
                    HttpPostedFile fileGovID = GovtIdfileupload1.PostedFile;
                    byte[] documentGovID = new byte[fileGovID.ContentLength];
                    fileGovID.InputStream.Read(documentGovID, 0, (int)fileGovID.ContentLength);

                    bool checkFileTypeTC = uploadfile(Cert10FileUpload1, document);
                    bool checkFileTypeGID = uploadfile(GovtIdfileupload1, documentGovID);

                    //if (fuPostCard.HasFile)
                    //{
                    string contentTypeGovID2 = fuPostCard.PostedFile.ContentType;
                    HttpPostedFile fileGovID2 = fuPostCard.PostedFile;
                    byte[] documentGovID2 = new byte[fileGovID2.ContentLength];
                    fileGovID2.InputStream.Read(documentGovID2, 0, (int)fileGovID2.ContentLength);
                    bool checkFileTypeIDProof = uploadfile(fuPostCard, documentGovID2);
                    //bool checkFileTypeIDProof = uploadPhotoValidation(fuPostCard, documentGovID2);
                    //if (checkFileTypeIDProof)
                    //{
                    if (checkFileTypeTC && checkFileTypeGID && checkFileTypeIDProof)
                    {
                        DataTable dt = ObjMast.findEntryExistForResetPasswordThruNewMobEmail(regNo);
                        //check when was it requested for last time - TAT : 24 hours to make another request

                        // if requested twice, candidate sould be notified of exceeding second opertunity 
                        // 
                        if (dt.Rows.Count > 0)
                        {
                            DataTable dtRejectCount = ObjMast.getRejectedSatusCountEntry(regNo);
                            if (dtRejectCount.Rows.Count < 3)
                            {
                                //if ((Convert.ToDateTime(rdate) - Convert.ToDateTime(dt.Rows[0]["entryByCandidatedate"])).TotalHours > 24)
                                if (dt.Rows[0]["approvalStatus"].ToString() == "REJECTED")
                                {
                                    //i = ObjMast.update_ResetPasswordThruNewMobEmail(regNo, requestReferanceNo, txt_DOB.Text, txt_roll_no.Text, ddl_pass_year.SelectedValue,ddlPostCode.SelectedValue, Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), Utility.putstring(txtspouse.Text), Utility.putstring(txtuid.Text), Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), document, documentGovID, rdate, ip);
                                    //i = ObjMast.insert_ResetPasswordThruNewMobEmail(regNo, requestReferanceNo, txt_DOB.Text, txt_roll_no.Text, ddl_pass_year.SelectedValue, ddlPostCode.SelectedValue, Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), Utility.putstring(txtspouse.Text), Utility.putstring(txtuid.Text), Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), document, documentGovID, rdate, ip);
                                    i = ObjMast.insert_ResetPasswordThruNewMobEmail(regNo, requestReferanceNo, txt_DOB.Text, txt_roll_no.Text, ddl_pass_year.SelectedValue, posCode, Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), Utility.putstring(txtspouse.Text), Utility.putstring(txtuid.Text), Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), document, documentGovID, documentGovID2, rdate, ip);
                                }
                                else
                                {
                                    msg.Show("Your request has already been registered to update mobile number / email id.");
                                }
                            }
                            else
                            {
                                msg.Show("Your have exceeded the opertunity limit (3) to update your email and mobile number.");
                            }
                        }
                        else
                        {
                            //int i = ObjMast.insert_ResetPasswordReqEntry(rids, "", "0", Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), "", txt_DOB.Text, "", Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), ip, "Y", rdate, txt_roll_no.Text, ddl_pass_year.SelectedValue, Utility.putstring(txtspouse.Text));
                            //i = ObjMast.insert_ResetPasswordThruNewMobEmail(regNo, requestReferanceNo, txt_DOB.Text, txt_roll_no.Text, ddl_pass_year.SelectedValue, ddlPostCode.SelectedValue, Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), Utility.putstring(txtspouse.Text), Utility.putstring(txtuid.Text), Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), document, documentGovID, rdate, ip);
                            i = ObjMast.insert_ResetPasswordThruNewMobEmail(regNo, requestReferanceNo, txt_DOB.Text, txt_roll_no.Text, ddl_pass_year.SelectedValue, posCode, Utility.putstring(txt_name.Text), Utility.putstring(txt_fh_name.Text), Utility.putstring(txt_mothername.Text), Utility.putstring(txtspouse.Text), Utility.putstring(txtuid.Text), Utility.putstring(txt_mob.Text), Utility.putstring(txt_email.Text), document, documentGovID, documentGovID2, rdate, ip);
                        }

                        if (i > 0)
                        {
                            btnrsubmit.Enabled = false;
                            Type cstype = this.GetType();
                            string message = @"A request to update your mobile and email has been received vide reference number " + requestReferanceNo +
                                ". Your request will be processed by DSSSB within two weeks. Once your request is approved on the basis of documents submitted by you, you will be informed on the new mobile / email entered by you. Based on the same you need to further reset your password.";
                            trnewreg.Visible = false;
                            tblfilldtl.Visible = false;
                            trreg.Visible = true;
                            lblmsg.Text = message;
                            objsms.sendmsg(txt_mob.Text.Trim(), message);
                            sendmail.sendMail(txt_email.Text.Trim(), "", "", "sadsssb.delhi@nic.in", "DSSSB online registration", message, "");

                            regno = txt_DOB.Text.Replace("/", "") + txt_roll_no.Text + ddl_pass_year.SelectedValue;
                            DataTable dtOME = ObjMast.validateCandidateAppliedForSelectedPostCode(regno, "", "GetOldMobEmail");
                            if (dtOME.Rows.Count > 0)
                            {
                                string msg = "A request to change DSSSB OARS login account has been received vide reference number " + requestReferanceNo + ". If the request has not been made by you, kindly inform immediately at email helpdesk-dsssb@nic.in, mentioning your reference number, name, father's name, mother's name, Date of Birth(DOB), mobile number and email address. If no request is received within 24 hours of receipt of this message/email, it would be presumed that you have nothing to say and the request for updating of mobile/email would be responded accordingly.";
                                objsms.sendmsg(dtOME.Rows[0]["mobileno"].ToString(), msg);
                                sendmail.sendMail(Utility.getstring(dtOME.Rows[0]["email"].ToString()), "", "", "sadsssb.delhi@nic.in", "DSSSB online registration", msg, "");
                            }
                        }
                        else
                        {
                            msg.Show("Data Not Updated");
                        }

                        //}
                        //else {
                        //    msg.Show("Your request has been already registered.Please try after 24 hours from your last request if no reponse received.");
                        //}
                    }
                    else
                    {
                        msg.Show("Please check only pdf files can be uploaded.");
                    }
                    //}
                    //else
                    //{
                    //    msg.Show("Upload proper dimensioned image");
                    //}
                    //}
                    //else
                    //{
                    //    msg.Show("Upload Post Card Size Photograph.");
                    //}
                }
                catch (Exception ex)
                {

                }
            }
        }
        else
        {
            msg.Show("Please agree with the Undertaking.");
        }
    }

    //private bool uploadPhotoValidation(FileUpload fu, byte[] imagesize)
    //{
    //    Boolean Flag;
    //    int ttsize;
    //    int result1;
    //    string fileName1 = fu.PostedFile.FileName;
    //    string type1 = fileName1.Substring(fileName1.LastIndexOf("."));
    //    type1 = type1.ToLower();
    //    if (type1 == ".jpg")
    //    {
    //        result1 = 1;
    //        Flag = true;
    //    }
    //    else if (type1 == ".JPEG")
    //    {
    //        result1 = 1;
    //        Flag = true;
    //    }
    //    else if (type1 == ".jpeg")
    //    {
    //        result1 = 1;
    //        Flag = true;
    //    }
    //    else if (type1 == ".JPG")
    //    {
    //        result1 = 1;
    //        Flag = true;
    //    }
    //    else
    //    {
    //        ScriptManager.RegisterStartupScript(this.Page, GetType(), "alert", "alert('Choose only jpeg image.')", true);
    //        result1 = 0;
    //        return false;
    //    }
    //    Session["file_type"] = fu.PostedFile.ContentType.ToString();
    //    if (fuPostCard.HasFile)
    //    {
    //        //check below for resolution W*H
    //        Bitmap bit = new Bitmap(fuPostCard.FileContent);
    //        var h = bit.Height;
    //        var w = bit.Width;
    //        System.Drawing.Image UpImage = System.Drawing.Image.FromStream(fuPostCard.PostedFile.InputStream);

    //        if (UpImage.PhysicalDimension.Width < 480.0 || UpImage.PhysicalDimension.Height < 672.0)
    //        {
    //            msg.Show("File Dimension of your photograph should be between 480*672 pixel (width*height) and 500*700 pixel (width*height).");
    //            return false;
    //        }
    //        else if (UpImage.PhysicalDimension.Width > 500.0 || UpImage.PhysicalDimension.Height > 700.0)
    //        {
    //            msg.Show("File Dimension of your photograph should be between 480*672 pixel (width*height) and 500*700 pixel (width*height).");
    //            return false;
    //        }
    //        else
    //        {
    //            if (fu.PostedFile.ContentLength < 50000)
    //            {
    //                msg.Show("File size cannot be less than 50 KB.");
    //                return false;
    //            }
    //            else if (fu.PostedFile.ContentLength > 300000)
    //            {
    //                msg.Show("File size cannot be greater than 300 KB.");
    //                return false;
    //            }
    //            else
    //            {
    //                ttsize = 1;
    //                //ScriptManager.RegisterStartupScript(this.Page, GetType(), "alert", "alert('File of size more than 40KB and less than 60KB can be uploaded')", true);
    //                //return true;
    //            }
    //        }
    //    }

    //    if (result1 == 1)
    //    {
    //        if (checkRealJPGFile(imagesize, fu) == true)
    //        //  if (true == true)
    //        {
    //            string type2 = fileName1;
    //            if (type2.Contains(":"))
    //            {
    //                type2 = fileName1.Substring(fileName1.LastIndexOf("\\"));
    //                type2 = type2.Substring(1);

    //                Int32 i = type2.Length;
    //                if (i < 4)
    //                {
    //                    i = 0;
    //                }
    //                else
    //                {
    //                    i = i - 4;
    //                    type2 = type2.Substring(0, i);
    //                }
    //                Flag = true;
    //            }
    //            else
    //            {
    //                Int32 j = type2.Length;
    //                if (j < 4)
    //                {
    //                    j = 0;
    //                }
    //                else
    //                {
    //                    j = j - 4;
    //                    type2 = type2.Substring(0, j);
    //                }
    //                Flag = true;
    //            }
    //        }
    //        else
    //        {
    //            ScriptManager.RegisterStartupScript(this.Page, GetType(), "alert", "alert('Uploaded File is not a Valid File. Upload a Valid Photo.')", true);
    //            return false;
    //        }
    //    }
    //    return Flag;
    //}
    Boolean checkRealJPGFile(byte[] file, FileUpload passfile)
    {
        Stream fs = default(Stream);
        fs = passfile.PostedFile.InputStream;
        BinaryReader br1 = new BinaryReader(fs);
        imgfile = br1.ReadBytes(passfile.PostedFile.ContentLength);
        //Image file Starting Bytes       
        byte[] chkByte = { 255, 216, 255, 224 };
        int j = 0;

        byte[] buffer = new byte[512];
        // fu.Read(buffer, 0, 512);
        string content = System.Text.Encoding.UTF8.GetString(imgfile);
        if (Regex.IsMatch(content, @"<script|<html|<head|<title|<body|<pre|<table|<a\s+href|<img|<plaintext|<cross\-domain\-policy",
            RegexOptions.IgnoreCase | RegexOptions.CultureInvariant | RegexOptions.Multiline))
        {
            ScriptManager.RegisterStartupScript(this.Page, GetType(), "alert", "alert('Invalid image.')", true);
            return false;
        }

        for (int i = 0; i <= 3; i++)
        {
            if (file[i] == chkByte[i])
            {
                j = j + 1;

            }
        }
        if (j == 4)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //check for jpg ends
    protected void txt_DOB_TextChanged(object sender, EventArgs e)
    {
        string current_date = DateTime.Now.AddYears(-12).ToString("dd/MM/yyyy");
        if (!txt_DOB.Text.Contains("/"))
        {
            msg.Show("Date can only be separated by '/'");
            txt_DOB.Text = "";
            txt_DOB.Focus();
        }
        else if (txt_DOB.Text.Length == 10)
        {
            if (Utility.comparedatesDMY(txt_DOB.Text, current_date) > 0)
            {
                msg.Show("Age Can Not be less than 12 Year Form Current Date");
                txt_DOB.Text = "";
                txt_DOB.Focus();
            }
        }
        else
        {
            string dob = txt_DOB.Text.ToString();
            fillyear(dob);
        }

    }
    protected void btnagree_Click(object sender, EventArgs e)
    {
        if (chkagree.Checked)
        {
            string serialno = MD5Util.Decrypt(Request.QueryString["serial"].ToString(), true);
            string postcode = MD5Util.Decrypt(Request.QueryString["postcode"].ToString(), true);
            int temp = objcand.Insertspecial_reg_mapping(lblcandregno.Text, serialno, postcode);
            if (temp > 0)
            {
                Server.Transfer("Default.aspx");
            }
        }
        else
        {
            msg.Show("Please check disclaimer first");
            return;
        }
    }
    protected void btndisagree_Click(object sender, EventArgs e)
    {
        if (chkagree.Checked)
        {
            msg.Show("You will not be able to apply for any vacant post you have already applied.");
            Server.Transfer("Default.aspx");
        }
        else
        {
            msg.Show("Please check disclaimer first");
            return;
        }
    }
    protected void btnchkavail_Click(object sender, EventArgs e)
    {
        if (Validation.chkLevel13(txt_DOB.Text))
        {
            msg.Show("Invalid Character in Date of Birth");
        }
        else if (Validation.chkLevel(ddl_pass_year.SelectedValue))
        {
            msg.Show("Invalid Character in Passing year");
        }

        else if (Validation.chkLevel(txt_roll_no.Text) || txt_roll_no.Text.Length < 3 || txt_roll_no.Text.Length > 15)
        {
            msg.Show("Invalid Character in Roll No or Roll No length is less than 3 digit or Roll No length is more than 15 digit.");
        }
        else
        {
            string rdate = Utility.formatDatewithtime(DateTime.Now);
            regno = txt_DOB.Text.Replace("/", "") + txt_roll_no.Text + ddl_pass_year.SelectedValue;
            dt = ObjMast.IsExist_Applicant(regno, "", "", "", "");
            int count = dt.Rows.Count;
            if (count > 0)
            {
                DataTable dt1 = ObjMast.findEntryExistForResetPasswordThruNewMobEmail(regno);
                DataTable dtRejectCount = ObjMast.getRejectedSatusCountEntry(regno);
                if (dt1.Rows.Count > 0 && dt1.Rows[0]["approvalStatus"].ToString() != "REJECTED")
                {
                    msg.Show("Your request has already been registered to update mobile number / email id.");
                }
                else if (dtRejectCount.Rows.Count > 3)
                {
                    msg.Show("Your have exceeded the opertunity limit (3) to update your email and mobile number.");
                }
                else
                {
                    tblfilldtl.Visible = true;
                    btnchkavail.Visible = false;
                    //  tblfilldtNewl.Visible = true;
                    lblcandregno.Text = dt.Rows[0]["rid"].ToString();
                    //lblcandname.Text = dt.Rows[0]["name"].ToString();
                    //txt_name.Text = dt.Rows[0]["name"].ToString();
                    //lblcandfname.Text = dt.Rows[0]["fname"].ToString();
                    //txt_fh_name.Text = dt.Rows[0]["fname"].ToString();
                    lblcanddob.Text = dt.Rows[0]["birthdt"].ToString();
                }
            }
            else
            {
                tblfilldtl.Visible = false;
                btnchkavail.Visible = true;
                msg.Show("Details not found in OARS, Please check.");
                return;


            }
        }
    }


    private bool uploadfile(FileUpload fileupload, byte[] imagesize)
    {
        bool checkfiletype = false;
        byte[] imageSize = imagesize;
        string ipaddress = GetIPAddress();
        try
        {
            if (fileupload.PostedFile != null && fileupload.PostedFile.FileName != "")
            {
                string filename = fileupload.PostedFile.FileName.ToString();
                string[] FileExtension = filename.Split('.');
                string ext = System.IO.Path.GetExtension(fileupload.PostedFile.FileName).ToLower();
                if (ext != ".pdf" && ext != ".PDF")
                {
                    msg.Show("only pdf Files are allowed");
                }
                //1024*1024*2= 2MB almost
                else if (fileupload.PostedFile.ContentLength > 2100000)
                {
                    msg.Show("File Size is greater than 2 MB.");
                }
                else
                {
                    HttpPostedFile uploadedImage = fileupload.PostedFile;
                    uploadedImage.InputStream.Read(imageSize, 0, (int)fileupload.PostedFile.ContentLength);
                    checkfiletype = chkfiletype(imageSize, ext);
                    if (!checkfiletype)
                    {
                        msg.Show("Only pdf files with size less than 2MB can be uploaded");

                    }
                    else
                    {
                        return checkfiletype;
                    }

                }
            }

        }
        catch (Exception ex)
        {
            //Response.Redirect("ErrorPage.aspx");
        }
        return checkfiletype;
    }
    public bool chkfiletype(byte[] file, string ext)
    {
        byte[] chkByte = null;

        if (ext == ".pdf")
        {
            chkByte = new byte[] { 37, 80, 68, 70 };
        }

        int j = 0;
        for (int i = 0; i <= 3; i++)
        {
            if (chkByte == null)
            {
                break;
            }
            else if (file[i] == chkByte[i])
            {
                j = j + 1;

            }
        }
        if (j == 4)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    //public void fillYears()
    //{
    //    List<int> years = new List<int>();
    //    int currentYear = DateTime.Now.Year;
    //    for (int year = 2012; year <= currentYear; year++)
    //    {
    //        years.Add(year);
    //    }
    //    ddlYearPC.DataSource = years;
    //    ddlYearPC.DataBind();
    //    ddlYearPC.Items.Insert(0, Utility.ddl_Select_Value());

    //}

    //protected void ddlYearPC_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    string year = ddlYearPC.SelectedItem.Text;
    //    dt = ObjMast.getPostCodeForSelectedYear(year);
    //    if (dt.Rows.Count > 0)
    //    {
    //        ddlPostCode.DataSource = dt;
    //        ddlPostCode.DataBind();
    //        ddlPostCode.DataValueField = "postcode";
    //        ddlPostCode.DataBind();
    //        ddlPostCode.Items.Insert(0, new ListItem("None of these", "NA"));
    //    }
    //}
    protected void txt_mob_TextChanged(object sender, EventArgs e)
    {
        string mobNo = txt_mob.Text.Trim();
        checkAvailabilityForRegistration("", mobNo, "", "", "");
    }
    public void checkAvailabilityForRegistration(string regno, string mobNo, string email, string aadhar, string proofOfIDNo)
    {
        dt = ObjMast.IsExist_Applicant(regno, mobNo, Utility.putstring(email), aadhar, proofOfIDNo);
        if (dt.Rows.Count > 0)
        {
            if (mobNo != "")
            {
                txt_mob.Text = string.Empty;
                msg.Show("This mobile number is already registered.");
            }
            else if (email != "")
            {
                txt_email.Text = string.Empty;
                msg.Show("This email-id is already registered.");
            }
            else if (regno != "")
            {
                txt_roll_no.Text = string.Empty;
                msg.Show("You are already registred with us and your registration number : DOB(ddmmyyyy) + 10th Roll number + 10th Passing Year.");
            }

            else
            {

            }
        }
        else
        {

        }
    }
    protected void txt_email_TextChanged(object sender, EventArgs e)
    {
        string email = txt_email.Text.Trim();
        Regex reg = new Regex(@"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$");
        if (reg.IsMatch(email))
        {
            checkAvailabilityForRegistration("", "", email, "", "");
        }
        else
        {
            msg.Show("Invalid characters in email-id ");
        }
    }
    //protected void rbtApplid_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    if (rbtApplid.SelectedValue == "Yes")
    //    {
    //        trPostCode.Visible = true;
    //    }
    //    else
    //    {
    //        trPostCode.Visible = false;
    //        regno = txt_DOB.Text.Replace("/", "") + txt_roll_no.Text + ddl_pass_year.SelectedValue;
    //        dt = ObjMast.validateCandidateAppliedForSelectedPostCode(regno, "", "RbtYN");
    //        if (dt.Rows.Count > 0)
    //        {
    //            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('You have previously applied on OARS Portal, so provide Post Code detail.');window.location ='ForgetPassword.aspx';", true);
    //        }
    //    }
    //}
    //protected void ddlPostCode_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        string postCode = ddlPostCode.SelectedValue;
    //        regno = txt_DOB.Text.Replace("/", "") + txt_roll_no.Text + ddl_pass_year.SelectedValue;
    //        dt = ObjMast.validateCandidateAppliedForSelectedPostCode(regno, postCode, "PCode");
    //        if (dt.Rows.Count <= 0)
    //        {
    //            ScriptManager.RegisterStartupScript(this, this.GetType(), "alert", "alert('Your entered detail do not match with OARS Portal.');window.location ='ForgetPassword.aspx';", true);
    //        }

    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
}



